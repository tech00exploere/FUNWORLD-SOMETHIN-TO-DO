<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Maze of the Forgotten</title>
  <style>
    body {
  margin: 0;
  overflow: hidden;
  background: #000;
}

canvas {
  display: block;
  width: 100vw;
  height: 100vh;
  filter: brightness(0.5) contrast(1.2);
}

  </style>
</head>
<body>
  <canvas id="mazeCanvas"></canvas>
  <script>
    // script.js
const canvas = document.getElementById("mazeCanvas");
const ctx = canvas.getContext("2d");

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

const tileSize = 40;
const cols = Math.floor(canvas.width / tileSize);
const rows = Math.floor(canvas.height / tileSize);

const playerImg = new Image();
playerImg.src = "image/player.png";

const zombieImg = new Image();
zombieImg.src = "image/zombie.png";


// Simple maze grid (1 = wall, 0 = path)
let maze = Array.from({ length: rows }, () =>
  Array.from({ length: cols }, () => (Math.random() < 0.2 ? 1 : 0))
);

// Player
let player = {
  x: 1,
  y: 1,
  color: "white"
};

// Zombie
let zombie = {
  x: cols - 2,
  y: rows - 2,
  color: "red"
};

document.addEventListener("keydown", (e) => {
  let dx = 0, dy = 0;
  if (e.key === "ArrowUp") dy = -1;
  if (e.key === "ArrowDown") dy = 1;
  if (e.key === "ArrowLeft") dx = -1;
  if (e.key === "ArrowRight") dx = 1;

  let newX = player.x + dx;
  let newY = player.y + dy;

  if (maze[newY] && maze[newY][newX] === 0) {
    player.x = newX;
    player.y = newY;
  }
});

function drawMaze() {
  for (let y = 0; y < rows; y++) {
    for (let x = 0; x < cols; x++) {
      if (maze[y][x] === 1) {
        ctx.fillStyle = "#111";
        ctx.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
      }
    }
  }
}

// function drawPlayer() {
//   ctx.fillStyle = player.color;
//   ctx.beginPath();
//   ctx.arc(
//     player.x * tileSize + tileSize / 2,
//     player.y * tileSize + tileSize / 2,
//     tileSize / 3,
//     0,
//     Math.PI * 2
//   );
//   ctx.fill();
// }

// function drawPlayer() {
//   ctx.drawImage(
//     playerImg,
//     player.x * tileSize,
//     player.y * tileSize,
//     tileSize,
//     tileSize
//   );
// }


// function drawZombie() {
//   ctx.fillStyle = zombie.color;
//   ctx.beginPath();
//   ctx.arc(
//     zombie.x * tileSize + tileSize / 2,
//     zombie.y * tileSize + tileSize / 2,
//     tileSize / 3,
//     0,
//     Math.PI * 2
//   );
//   ctx.fill();
// }

// function drawZombie() {
//   ctx.drawImage(
//     zombieImg,
//     zombie.x * tileSize,
//     zombie.y * tileSize,
//     tileSize,
//     tileSize
//   );
// }

function drawPlayer() {
  // Outline
  ctx.fillStyle = "white";
  ctx.fillRect(
    player.x * tileSize - 2,
    player.y * tileSize - 2,
    tileSize + 4,
    tileSize + 4
  );

  // Image
  ctx.drawImage(
    playerImg,
    player.x * tileSize,
    player.y * tileSize,
    tileSize,
    tileSize
  );
}

function drawZombie() {
  // Outline
  ctx.fillStyle = "red";
  ctx.fillRect(
    zombie.x * tileSize - 2,
    zombie.y * tileSize - 2,
    tileSize + 4,
    tileSize + 4
  );

  // Image
  ctx.drawImage(
    zombieImg,
    zombie.x * tileSize,
    zombie.y * tileSize,
    tileSize,
    tileSize
  );
}




function moveZombie() {
  let dx = player.x - zombie.x;
  let dy = player.y - zombie.y;

  if (Math.abs(dx) > Math.abs(dy)) {
    zombie.x += dx > 0 ? 1 : -1;
  } else {
    zombie.y += dy > 0 ? 1 : -1;
  }

  // Prevent walking into walls
  if (maze[zombie.y] && maze[zombie.y][zombie.x] === 1) {
    zombie.x -= dx > 0 ? 1 : -1;
    zombie.y -= dy > 0 ? 1 : -1;
  }
}

function drawFlashlight() {
  ctx.save();
  ctx.globalCompositeOperation = "destination-in";
  ctx.beginPath();
  ctx.arc(
    player.x * tileSize + tileSize / 2,
    player.y * tileSize + tileSize / 2,
    tileSize * 3,
    0,
    Math.PI * 2
  );
  ctx.fill();
  ctx.restore();
}

function gameLoop() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawMaze();
  drawPlayer();
  drawZombie();
  drawFlashlight();
  moveZombie();

  if (player.x === zombie.x && player.y === zombie.y) {
    alert("You were caught by the infected...");
    document.location.reload();
  }

  requestAnimationFrame(gameLoop);
}

gameLoop();

  </script>
</body>
</html>
